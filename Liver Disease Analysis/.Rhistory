geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Liver Function Test by Diagnosis")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
# Load required libraries
library(ggplot2)       # Data visualization
library(corrplot)      # Correlation matrix visualization
library(caret)         # Machine learning (classification, regression)
library(randomForest)  # Random Forest model
library(e1071)         # Support Vector Machine
library(arules)        # Association Rule Mining
library(arulesViz)     # Visualization for Association Rules
library(Matrix)
# Load the dataset (update the file path if needed)
data <- read.csv("Liver_disease_data.csv", header = TRUE)
# View the first few rows
head(data)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# Check for missing values
sum(is.na(data))
# Histogram of Age
ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme_minimal()
# Boxplot of Liver Function Test by Diagnosis
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal()
# Select only numeric columns
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Visualize correlation matrix
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.8)
ggplot(data, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Liver Function Test by Diagnosis")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
# Load required libraries
library(ggplot2)       # Data visualization
library(corrplot)      # Correlation matrix visualization
library(caret)         # Machine learning (classification, regression)
library(randomForest)  # Random Forest model
library(e1071)         # Support Vector Machine
library(arules)        # Association Rule Mining
library(arulesViz)     # Visualization for Association Rules
library(Matrix)
# Load the dataset (update the file path if needed)
data <- read.csv("Liver_disease_data.csv", header = TRUE)
# View the first few rows
head(data)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# Check for missing values
sum(is.na(data))
# Histogram of Age
ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme_minimal()
# Boxplot of Liver Function Test by Diagnosis
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal()
# Select only numeric columns
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Visualize correlation matrix
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.8)
ggplot(data, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Liver Function Test by Diagnosis")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# View the first few rows
head(data)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# Check for missing values
sum(is.na(data))
# Histogram of Age
ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme_minimal()
# Boxplot of Liver Function Test by Diagnosis
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal()
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Visualize correlation matrix
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.8)
ggplot(data, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Liver Function Test by Diagnosis")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
# Load required libraries
library(ggplot2)       # Data visualization
library(corrplot)      # Correlation matrix visualization
library(caret)         # Machine learning (classification, regression)
library(randomForest)  # Random Forest model
library(e1071)         # Support Vector Machine
library(arules)        # Association Rule Mining
library(arulesViz)     # Visualization for Association Rules
library(Matrix)
# Load the dataset (update the file path if needed)
data <- read.csv("Liver_disease_data.csv", header = TRUE)
# View the first few rows
head(data)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# Check for missing values
sum(is.na(data))
# Histogram of Age
ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme_minimal()
# Boxplot of Liver Function Test by Diagnosis
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal()
# Select only numeric columns
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Visualize correlation matrix
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.8)
ggplot(data, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
# Load required libraries
library(ggplot2)       # Data visualization
library(corrplot)      # Correlation matrix visualization
library(caret)         # Machine learning (classification, regression)
library(randomForest)  # Random Forest model
library(e1071)         # Support Vector Machine
library(arules)        # Association Rule Mining
library(arulesViz)     # Visualization for Association Rules
library(Matrix)
# Load the dataset (update the file path if needed)
data <- read.csv("Liver_disease_data.csv", header = TRUE)
# View the first few rows
head(data)
# Convert relevant columns to factors
data$Gender <- as.factor(data$Gender)
data$Smoking <- as.factor(data$Smoking)
data$GeneticRisk <- as.factor(data$GeneticRisk)
data$Diabetes <- as.factor(data$Diabetes)
data$Hypertension <- as.factor(data$Hypertension)
data$Diagnosis <- as.factor(data$Diagnosis)
# Check for missing values
sum(is.na(data))
# Histogram of Age
ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme_minimal()
# Boxplot of Liver Function Test by Diagnosis
ggplot(data, aes(x = Diagnosis, y = LiverFunctionTest, fill = Diagnosis)) +
geom_boxplot() +
theme_minimal()
# Select only numeric columns
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Visualize correlation matrix
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.cex = 0.8)
ggplot(data, aes(x = BMI)) +
geom_histogram(binwidth = 2, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Distribution of BMI")
ggplot(data, aes(x = Age, y = LiverFunctionTest, color = Diagnosis)) +
geom_point(alpha = 0.6) +
theme_minimal() +
labs(title = "Age vs Liver Function Test")
set.seed(123)  # For reproducibility
library(caret)
# Split data (80% train, 20% test)
train_index <- createDataPartition(data$LiverFunctionTest, p = 0.8, list = FALSE)
train_data <- data[train_index, ]
test_data <- data[-train_index, ]
# Train model
lm_model <- lm(LiverFunctionTest ~ Age + BMI + AlcoholConsumption + PhysicalActivity, data = train_data)
# Model summary
summary(lm_model)
# Predict on test data
predictions <- predict(lm_model, test_data)
# Calculate RMSE (Root Mean Square Error)
rmse <- sqrt(mean((test_data$LiverFunctionTest - predictions)^2))
print(paste("RMSE:", rmse))
library(randomForest)
# Train model
rf_model <- randomForest(Diagnosis ~ ., data = train_data, ntree = 100, mtry = 3, importance = TRUE)
# Print model summary
print(rf_model)
# Predictions on test set
rf_predictions <- predict(rf_model, test_data)
# Confusion Matrix
conf_matrix <- confusionMatrix(rf_predictions, test_data$Diagnosis)
print(conf_matrix)
library(arules)
# Convert relevant columns to factors
data_factor <- data
data_factor$Gender <- as.factor(data_factor$Gender)
data_factor$Smoking <- as.factor(data_factor$Smoking)
data_factor$GeneticRisk <- as.factor(data_factor$GeneticRisk)
data_factor$Diabetes <- as.factor(data_factor$Diabetes)
data_factor$Hypertension <- as.factor(data_factor$Hypertension)
data_factor$Diagnosis <- as.factor(data_factor$Diagnosis)
# Convert dataset to transactions
data_trans <- as(data_factor, "transactions")
rules <- apriori(data_trans, parameter = list(supp = 0.1, conf = 0.8, minlen = 2))
inspect(head(sort(rules, by = "confidence"), 10))  # Show top 10 rules
library(ggcorrplot)
# Select only numeric columns for correlation analysis
numeric_data <- data[, sapply(data, is.numeric)]
# Compute correlation matrix
cor_matrix <- cor(numeric_data)
# Plot correlation heatmap (Corrected)
ggcorrplot(cor_matrix, method = "square", type = "upper", lab = TRUE, lab_size = 3)
